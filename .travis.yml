language: c
dist: trusty
sudo: false
env:
 global:
  - ARCH=x64

cache: ccache

matrix:
 include:
 - name: "Linux GCC: +centos +debian"
   os: linux
   compiler: gcc
   env: ADDITIONAL_BUILDS="centos debian"
   before_script:
    - ./configure --install-deps --disable-lz4-ext --prefix="$PWD/dest"
 - name: "Linux clang: +alpine"
   os: linux
   compiler: clang
   env: ADDITIONAL_BUILDS="alpine"
   before_script:
    - ./configure --install-deps --disable-lz4-ext --prefix="$PWD/dest"
 - name: "OSX GCC"
   os: osx
   compiler: gcc
   before_script:
    - ./configure --install-deps --disable-lz4-ext --prefix="$PWD/dest"
 - name: "OSX clang: +static"
   os: osx
   compiler: clang
   before_script:
    - ./configure --install-deps --disable-lz4-ext --prefix="$PWD/dest" --enable-static
 - name: "Linux MinGW-w64"
   os: linux
   compiler: x86_64-w64-mingw32-gcc
   dist: bionic
   env:
    - ADDITIONAL_BUILDS="mingw"
    - SKIP_MAKE=y
   before_script:
    - cmake -DCMAKE_TOOLCHAIN_FILE=./packaging/mingw-w64/mingw_toolchain.cmake \
      -DMINGW_BUILD:BOOL=ON \
      -DWITHOUT_WIN32_CONFIG:BOOL=ON \
      -DRDKAFKA_BUILD_EXAMPLES:BOOL=ON \
      -DRDKAFKA_BUILD_TESTS:BOOL=ON \
      -DWITH_LIBDL:BOOL=OFF \
      -DWITH_PLUGINS:BOOL=OFF \
      -DWITH_SASL:BOOL=OFF \
      -DWITH_SSL:BOOL=OFF \
      -DWITH_ZLIB:BOOL=OFF \
      -DRDKAFKA_BUILD_STATIC:BOOL=OFF \
      -DCMAKE_WINDOWS_EXPORT_ALL_SYMBOLS:BOOL=TRUE . 1>&2 && make 1>&2
   addons:
    apt:
     packages:
      - gcc-mingw-w64-base
      - binutils-mingw-w64-x86-64
      - gcc-mingw-w64-x86-64
      - gcc-mingw-w64
      - g++-mingw-w64-x86-64
 - name: "Windows MinGW-w64"
   os: windows
   env:
    - SKIP_MAKE=y NO_ARTIFACTS=y
   before_script:
    - $mingw64 cmake -DCMAKE_MAKE_PROGRAM=mingw32-make -G "MSYS Makefiles" -DCMAKE_TOOLCHAIN_FILE=./packaging/mingw-w64/msys2_mingw_toolchain.cmake \
      -DMINGW_BUILD:BOOL=ON \
      -DWITHOUT_WIN32_CONFIG:BOOL=ON \
      -DRDKAFKA_BUILD_EXAMPLES:BOOL=ON \
      -DRDKAFKA_BUILD_TESTS:BOOL=ON \
      -DWITH_LIBDL:BOOL=OFF \
      -DWITH_PLUGINS:BOOL=OFF \
      -DWITH_SASL:BOOL=OFF \
      -DWITH_SSL:BOOL=OFF \
      -DWITH_ZLIB:BOOL=OFF \
      -DRDKAFKA_BUILD_STATIC:BOOL=OFF \
      -DCMAKE_WINDOWS_EXPORT_ALL_SYMBOLS:BOOL=TRUE . 1>&2
    - $mingw64 mingw32-make 1>&2
    - cp /mingw64/bin/{libwinpthread-1.dll,libgcc_s_seh-1.dll,libstdc++-6.dll} src/librdkafka.dll src-cpp/librdkafka++.dll ./tests
    - cd tests && ./test-runner.exe -l -Q -p1 && ./test-runner.exe -l -Q -p1 -P
 - name: "Linux GCC: +integration-tests +copyright-check +doc-check"
   os: linux
   dist: xenial
   compiler: gcc
   env: NO_ARTIFACTS=y RUN_INTEGRATION_TESTS=y COPYRIGHT_CHECK=y DOC_CHECK=y
   before_script:
    - wget -O rapidjson-dev.deb https://launchpad.net/ubuntu/+archive/primary/+files/rapidjson-dev_1.1.0+dfsg2-3_all.deb
    - sudo dpkg -i rapidjson-dev.deb
    - sudo pip install -r tests/requirements.txt
    - sudo apt update
    - sudo apt install -y doxygen graphviz
    - ./configure --install-deps --disable-lz4-ext --prefix="$PWD/dest"
 - name: "Linux GCC: +devel +code-cov"
   os: linux
   dist: bionic
   compiler: gcc
   env: NO_ARTIFACTS=y
   before_script:
    - ./configure --enable-devel --disable-lz4-ext --prefix="$PWD/dest"
    - ./packaging/tools/rdutcoverage.sh

before_install:
- |-
    case $TRAVIS_OS_NAME in
      windows)
        [[ ! -f C:/tools/msys64/msys2_shell.cmd ]] && rm -rf C:/tools/msys64
        choco uninstall -y mingw
        choco upgrade --no-progress -y msys2
        export msys2='cmd //C RefreshEnv.cmd '
        export msys2+='& set MSYS=winsymlinks:nativestrict '
        export msys2+='& C:\\tools\\msys64\\msys2_shell.cmd -defterm -no-start'
        export mingw64="$msys2 -mingw64 -full-path -here -c "\"\$@"\" --"
        export msys2+=" -msys2 -c "\"\$@"\" --"
        $msys2 pacman --sync --noconfirm --needed mingw-w64-x86_64-toolchain mingw-w64-x86_64-cmake
        ## Install more MSYS2 packages from https://packages.msys2.org/base here
        taskkill //IM gpg-agent.exe //F  # https://travis-ci.community/t/4967
        export PATH=/C/tools/msys64/mingw64/bin:$PATH
        export MAKE=mingw32-make  # so that Autotools can find it
        ;;
    esac

install:
 - ccache -s || echo "CCache is not available."
 - rm -rf artifacts dest
 - mkdir dest artifacts

before_cache:
- |-
    case $TRAVIS_OS_NAME in
      windows)
        # https://unix.stackexchange.com/a/137322/107554
        $msys2 pacman --sync --clean --noconfirm
        ;;
    esac

before_script:
script:
- if [[ $SKIP_MAKE != y ]]; then make -j2 all examples check && make -j2 -C tests build ; fi
- if [[ $SKIP_MAKE != y && $RUN_INTEGRATION_TESTS != y ]]; then make -C tests run_local_quick ; fi
- if [[ $SKIP_MAKE != y ]]; then make install ; fi
- if [[ -z $NO_ARTIFACTS ]]; then (cd dest && tar cvzf ../artifacts/librdkafka-${CC}.tar.gz .) ; fi
- for distro in $ADDITIONAL_BUILDS ; do packaging/tools/distro-build.sh $distro || exit 1 ; done
- if [[ $COPYRIGHT_CHECK == y ]]; then make copyright-check ; fi
- if [[ $DOC_CHECK == y ]]; then make docs ; fi
- if [[ $RUN_INTEGRATION_TESTS == y ]]; then (cd tests && ./interactive_broker_version.py -c "make quick" 2.3.0) ; fi

deploy:
  provider: s3
  access_key_id:
    secure: "m8FQrFesK0xSS1wHo2S7cuWkpO7VB91dBmj1XIYLRXZSkbMpKBJATcFcHNbrAp3slEp7wLAnT7CHrQ4ccQi4H68Z7mjEwdq4VKRE+7zqJ/feK8MOFNeSHWLQzgwLUYlRlc9+tzLNwxMuL2ilWgdjKOArsUVHo9LEKNfQ3T6zCJU="
  secret_access_key:
    secure: "GE6O0gk5VRervntCKAmczfBdSOvbr9bouJ15H2rpcOgHi8KTDEjI/NS69eLiRRSHBCARtcRqN4wfgy+/dn7D1VklY8a1rAKu02wGjw+fq7k7GVSSmynR/aF619R4SIABsaAhNCwswXnLHuLlq8HFk5ulG3z8DUvYBczB45bWZfQ="
  bucket: librdkafka-ci-packages
  region: us-west-1
  skip_cleanup: true
  local-dir: artifacts
  upload-dir: librdkafka/p-librdkafka__bld-travis__plat-${TRAVIS_OS_NAME}__arch-${ARCH}__tag-${TRAVIS_TAG}__sha-${TRAVIS_COMMIT}__bid-${TRAVIS_JOB_NUMBER}
  on:
    repo: edenhill/librdkafka
    all_branches: true
    tags: true
    on: $NO_ARTIFACTS != y
